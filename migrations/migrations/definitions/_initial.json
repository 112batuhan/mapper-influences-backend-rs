{"schemas":"DEFINE FUNCTION OVERWRITE fn::id_or_null($value: any) -> any {\n    IF $value.is_none() {\n        RETURN NONE;\n    }\n    ELSE {\n        RETURN meta::id($value);\n    };\n} PERMISSIONS FULL;\n\nDEFINE FUNCTION OVERWRITE fn::add_possible_nulls($var1: any, $var2: any) -> any {\n    IF type::is::none($var1) AND type::is::none($var2) {\n        RETURN NONE;\n    }\n    ELSE {\n        RETURN $var1 + $var2;\n    };\n} PERMISSIONS FULL;\n\nDEFINE TABLE OVERWRITE influenced_by SCHEMAFULL TYPE RELATION IN user OUT user ENFORCED;\n\nDEFINE FIELD OVERWRITE influence_type on influenced_by TYPE int DEFAULT 1;\nDEFINE FIELD OVERWRITE description ON influenced_by TYPE string DEFAULT \"\";\nDEFINE FIELD OVERWRITE beatmaps ON influenced_by TYPE set<int> DEFAULT [];\nDEFINE FIELD OVERWRITE updated_at ON influenced_by type datetime VALUE time::now();\nDEFINE FIELD OVERWRITE created_at ON influenced_by type datetime VALUE time::now() READONLY;\n\n// COUNTLESS HOURS LOST BECAUSE I USED VALUE INSTEAD OF DEFAULT\nDEFINE FIELD OVERWRITE order on influenced_by TYPE int \nDEFAULT (UPSERT increment:order SET increment+=1 RETURN increment).at(0).values().at(0);\n\nDEFINE INDEX OVERWRITE unique_in_out ON TABLE influenced_by COLUMNS in, out UNIQUE;\n\nDEFINE TABLE OVERWRITE script_migration SCHEMAFULL\n    PERMISSIONS\n        FOR select FULL\n        FOR create, update, delete NONE;\n\nDEFINE FIELD OVERWRITE script_name ON script_migration TYPE string;\nDEFINE FIELD OVERWRITE executed_at ON script_migration TYPE datetime VALUE time::now() READONLY;\nDEFINE TABLE OVERWRITE user SCHEMAFULL;\n\nDEFINE FIELD OVERWRITE username ON user TYPE string;\nDEFINE FIELD OVERWRITE avatar_url ON user TYPE string;\nDEFINE FIELD OVERWRITE bio ON user TYPE string DEFAULT \"\";\nDEFINE FIELD OVERWRITE ranked_mapper ON user TYPE bool DEFAULT false;\nDEFINE FIELD OVERWRITE authenticated ON user TYPE bool DEFAULT false;\nDEFINE FIELD OVERWRITE beatmaps ON user TYPE set<int> DEFAULT [];\nDEFINE FIELD OVERWRITE updated_at ON user type datetime VALUE time::now();\nDEFINE FIELD OVERWRITE created_at ON user type datetime VALUE time::now() READONLY;\nDEFINE FIELD OVERWRITE country_name ON user TYPE string;\nDEFINE FIELD OVERWRITE country_code ON user TYPE string;\nDEFINE FIELD OVERWRITE groups ON user FLEXIBLE TYPE array<object>;\nDEFINE FIELD OVERWRITE previous_usernames ON user TYPE array<string>;\nDEFINE FIELD OVERWRITE ranked_and_approved_beatmapset_count ON user TYPE int;\nDEFINE FIELD OVERWRITE ranked_beatmapset_count ON user TYPE int;\nDEFINE FIELD OVERWRITE nominated_beatmapset_count ON user TYPE int;\nDEFINE FIELD OVERWRITE guest_beatmapset_count ON user TYPE int;\nDEFINE FIELD OVERWRITE loved_beatmapset_count ON user TYPE int;\nDEFINE FIELD OVERWRITE graveyard_beatmapset_count ON user TYPE int;\nDEFINE FIELD OVERWRITE pending_beatmapset_count ON user TYPE int;\n\nDEFINE INDEX OVERWRITE country_name_index ON TABLE user COLUMNS country_name;\n","events":"DEFINE EVENT OVERWRITE add_influence ON TABLE influenced_by\nWHEN \n    $session.tk.ID == \"backend\" AND $event == \"CREATE\"\nTHEN (\n    CREATE activity \n    SET user = $after.in, \n        created_at = time::now(),\n        event_type = \"ADD_INFLUENCE\", \n        influence = {\n            id: $after.id,\n            out: $after.out,\n        }\n);\n\nDEFINE EVENT OVERWRITE add_influence_beatmap ON TABLE influenced_by\nWHEN\n    $session.tk.ID == \"backend\"\n    AND $event == \"UPDATE\"\n    AND array::len($after.beatmaps) > array::len($before.beatmaps)\nTHEN (\n    CREATE activity \n    SET user = $after.in,\n        created_at = time::now(),\n        event_type = \"ADD_INFLUENCE_BEATMAP\", \n        beatmap = array::complement($after.beatmaps, $before.beatmaps).at(0),\n        influence = {\n            id: $after.id,\n            out: $after.out,\n        }\n);\n\nDEFINE EVENT OVERWRITE add_user_beatmap ON TABLE user \nWHEN \n    $session.tk.ID == \"backend\" \n    AND $event == \"UPDATE\" \n    AND array::len($after.beatmaps) > array::len($before.beatmaps) \nTHEN (\n    CREATE activity \n    SET user = $after.id,\n        created_at = time::now(),\n        event_type = \"ADD_USER_BEATMAP\", \n        beatmap = array::complement($after.beatmaps, $before.beatmaps).at(0)\n);\n\n// edit_bio logs when creating user, so added before != null\nDEFINE EVENT OVERWRITE edit_bio ON TABLE user \nWHEN \n    $session.tk.ID == \"backend\"\n    AND $event == \"UPDATE\"\n    AND $before.bio != $after.bio\nTHEN (\n    CREATE activity \n    SET user = $after.id, \n        created_at = time::now(), \n        event_type = \"EDIT_BIO\", \n        bio = $after.bio\n);\n\nDEFINE EVENT OVERWRITE edit_influence_description ON TABLE influenced_by\nWHEN\n    $session.tk.ID == \"backend\"\n    AND $event == \"UPDATE\"\n    AND $before.description != $after.description\nTHEN (\n    CREATE activity \n    SET user = $after.in, \n        created_at = time::now(), \n        event_type = \"EDIT_INFLUENCE_DESC\", \n        description = $after.description,\n        influence = {\n            id: $after.id,\n            out: $after.out,\n        }\n);\n\nDEFINE EVENT OVERWRITE edit_influence_type ON TABLE influenced_by \nWHEN \n    $session.tk.ID == \"backend\"\n    AND $event == \"UPDATE\"\n    AND $before.influence_type != $after.influence_type \nTHEN (\n    CREATE activity \n    SET user = $after.in, \n        created_at = time::now(), \n        event_type = \"EDIT_INFLUENCE_TYPE\", \n        influence_type= $after.influence_type,\n        influence = {\n            id: $after.id,\n            out: $after.out,\n        }\n);\n\nDEFINE EVENT OVERWRITE remove_influence ON TABLE influenced_by\nWHEN \n    $session.tk.ID == \"backend\" AND $event == \"DELETE\"\nTHEN (\n    CREATE activity \n    SET user = $before.in, \n        created_at = time::now(),\n        event_type = \"REMOVE_INFLUENCE\", \n        influence = $before\n);\n\nDEFINE EVENT OVERWRITE remove_influence_beatmap ON TABLE influenced_by\nWHEN\n    $session.tk.ID == \"backend\"\n    AND $event == \"UPDATE\"\n    AND array::len($before.beatmaps) > array::len($after.beatmaps)\nTHEN (\n    CREATE activity \n    SET user = $after.in, \n        created_at = time::now(),\n        event_type = \"REMOVE_INFLUENCE_BEATMAP\", \n        beatmap = array::complement($before.beatmaps, $after.beatmaps).at(0),\n        influence = {\n            id: $after.id,\n            out: $after.out,\n        }\n);\n\nDEFINE EVENT OVERWRITE remove_user_beatmap ON TABLE user \nWHEN \n    $session.tk.ID == \"backend\"\n    AND $event == \"UPDATE\"\n    AND array::len($before.beatmaps) > array::len($after.beatmaps)\nTHEN (\n    CREATE activity \n    SET user = $after.id, \n        created_at = time::now(),\n        event_type = \"REMOVE_USER_BEATMAP\", \n        beatmap = array::complement($before.beatmaps, $after.beatmaps).at(0)\n);\n"}